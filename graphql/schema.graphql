input ActivateUserInput {
  userId: ID
  clientMutationId: String!
}

type ActivateUserPayload {
  user: User!
  clientMutationId: String!
}

type Mutation {
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  updateUserTheme(input: UpdateUserThemeInput!): UpdateUserThemePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer: User
  node(id: ID!): Node
}

type Theme implements Node {
  id: ID!
  name: String
  isSystem: Boolean!
  isDefault: Boolean!
  isSubscribed: Boolean!
  isRejected: Boolean!
}

enum ThemeFilterEnum {
  DEFAULT
  RELATED
  UNRELATED
  SUBSCRIBED
}

type ThemesConnection {
  pageInfo: PageInfo!
  edges: [ThemesEdge]
  count: Int!
}

type ThemesEdge {
  node: Theme
  cursor: String!
}

input UpdateUserThemeInput {
  themeId: ID!
  userId: ID
  status: UserThemeStatusEnum!
  clientMutationId: String!
}

type UpdateUserThemePayload {
  theme: Theme!
  user: User!
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  isActive: Boolean
  themes(before: String, after: String, first: Int, last: Int, filter: ThemeFilterEnum = related): ThemesConnection
}

enum UserThemeStatusEnum {
  SUBSCRIBED
  VISIBLE
  REJECTED
}
