input ActivateUserInput {
  userId: ID
  clientMutationId: String!
}

type ActivateUserPayload {
  user: User!
  clientMutationId: String!
}

input DislikeInsightInput {
  id: ID!
  clientMutationId: String!
}

type DislikeInsightPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input LikeInsightInput {
  id: ID!
  clientMutationId: String!
}

type LikeInsightPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

type Mutation {
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  subscribeOnTheme(input: SubscribeOnThemeInput!): SubscribeOnThemePayload
  unsubscribeFromTheme(input: UnsubscribeFromThemeInput!): UnsubscribeFromThemePayload
  rejectTheme(input: RejectThemeInput!): RejectThemePayload
  likeInsight(input: LikeInsightInput!): LikeInsightPayload
  dislikeInsight(input: DislikeInsightInput!): DislikeInsightPayload
  resetInsight(input: ResetInsightInput!): ResetInsightPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer: User
  node(id: ID!): Node
}

input RejectThemeInput {
  id: ID!
  clientMutationId: String!
}

type RejectThemePayload {
  user: User!
  theme: UserTheme!
  themeID: ID!
  clientMutationId: String!
}

input ResetInsightInput {
  id: ID!
  clientMutationId: String!
}

type ResetInsightPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input SubscribeOnThemeInput {
  id: ID!
  clientMutationId: String!
}

type SubscribeOnThemePayload {
  user: User!
  theme: UserTheme!
  themeID: ID!
  clientMutationId: String!
}

type Theme implements Node {
  id: ID!
  name: String
  isSystem: Boolean!
  isDefault: Boolean!
}

input UnsubscribeFromThemeInput {
  id: ID!
  clientMutationId: String!
}

type UnsubscribeFromThemePayload {
  user: User!
  theme: UserTheme!
  themeID: ID!
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  isActive: Boolean
  themes(after: String, first: Int, before: String, last: Int, filter: UserThemeFilterEnum = default): UserThemesConnection
  theme(id: ID!): UserTheme!
  insights(after: String, first: Int, before: String, last: Int, themeId: ID, userId: ID, filter: UserThemeInsightsFilterEnum): UserThemeInsightsConnection
}

type UserTheme implements Node {
  id: ID!
  name: String!
  url: String!
  isSubscribed: Boolean!
  isRejected: Boolean!
  insights(after: String, first: Int, before: String, last: Int, themeId: ID, userId: ID, filter: UserThemeInsightsFilterEnum): UserThemeInsightsConnection
}

enum UserThemeFilterEnum {
  DEFAULT
  AVAILABLE
  VISIBLE
  SUBSCRIBED
  REJECTED
  RELATED
  UNRELATED
}

type UserThemeInsight implements Node {
  id: ID!
  content: String!
  user: User!
  theme: Theme!
  rate: Int
  ratedAt: String
}

type UserThemeInsightsConnection {
  pageInfo: PageInfo!
  edges: [UserThemeInsightsEdge]
  totalCount: Int
  ratedCount: Int
  unratedCount: Int
}

type UserThemeInsightsEdge {
  node: UserThemeInsight
  cursor: String!
}

enum UserThemeInsightsFilterEnum {
  RATED
  UNRATED
  POSITIVE
  NEGATIVE
}

type UserThemesConnection {
  pageInfo: PageInfo!
  edges: [UserThemesEdge]
  count: Int!
  subscribedCount: Int!
  rejectedCount: Int!
}

type UserThemesEdge {
  node: UserTheme
  cursor: String!
}
