input ActivateViewerInput {
  clientMutationId: String!
}

type ActivateViewerPayload {
  viewer: User!
  clientMutationId: String!
}

input ActualizeThemeInsightsMutationInput {
  themeID: ID!
  clientMutationId: String!
}

type ActualizeThemeInsightsMutationPayload {
  timeTaken: Int!
  clientMutationId: String!
}

input ActualizeUserThemeInsightsMutationInput {
  userID: ID!
  themeID: ID!
  clientMutationId: String!
}

type ActualizeUserThemeInsightsMutationPayload {
  newInsightsCount: Int!
  timeTaken: Int!
  clientMutationId: String!
}

input CreateThemeMutationInput {
  name: String!
  clientMutationId: String!
}

type CreateThemeMutationPayload {
  theme: UserTheme!
  viewer: User!
  clientMutationId: String!
}

type Insight {
  id: ID
  content: String
}

input LikeInsightMutationInput {
  id: ID!
  rate: Int!
  clientMutationId: String!
}

type LikeInsightMutationPayload {
  updatedInsight: UserThemeInsight!
  clientMutationId: String!
}

type Mutation {
  activateViewer(input: ActivateViewerInput!): ActivateViewerPayload
  themeToViewer(input: ThemeToViewerInput!): ThemeToViewerPayload
  voteForInsight(input: VoteForInsightInput!): VoteForInsightPayload
  createTheme(input: CreateThemeMutationInput!): CreateThemeMutationPayload
  updateThemeStatus(input: ThemeStatusMutationInput!): ThemeStatusMutationPayload
  updateUserTheme(input: UserThemeMutationInput!): UserThemeMutationPayload
  actualizeUserThemeInsights(input: ActualizeUserThemeInsightsMutationInput!): ActualizeUserThemeInsightsMutationPayload
  actualizeThemeInsights(input: ActualizeThemeInsightsMutationInput!): ActualizeThemeInsightsMutationPayload
  likeInsight(input: LikeInsightMutationInput!): LikeInsightMutationPayload
  updateUserThemeInsight(input: UpdateUserThemeInsightMutationInput!): UpdateUserThemeInsightMutationPayload
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer(id: ID): User
  node(id: ID): User
}

type Theme {
  id: ID
  name: String
  url: String
  isSystem: Boolean
  isDefault: Boolean
  isSubscribedByViewer: Boolean
  isRejectedByViewer: Boolean
}

type ThemeConnection {
  pageInfo: PageInfo!
  edges: [ThemeEdge]
  count: Int!
}

type ThemeEdge {
  node: Theme
  cursor: String!
}

enum ThemeFilter {
  DEFAULT
  RELATED
  UNRELATED
  SUBSCRIBED
}

type ThemesInsightsEdge {
  node: Insight
  cursor: String!
}

input ThemeStatusMutationInput {
  themeID: ID!
  status: String!
  clientMutationId: String!
}

type ThemeStatusMutationPayload {
  viewer: User!
  theme: Theme!
  themeID: ID!
  clientMutationId: String!
}

input ThemeToViewerInput {
  themeId: ID!
  action: String!
  clientMutationId: String!
}

type ThemeToViewerPayload {
  theme: Theme
  clientMutationId: String!
}

input UpdateUserThemeInsightMutationInput {
  id: ID!
  rate: Int!
  clientMutationId: String!
}

type UpdateUserThemeInsightMutationPayload {
  insightID: ID!
  insight: UserThemeInsight!
  viewer: User!
  clientMutationId: String!
}

type User {
  id: ID
  name: String
  isActive: Boolean
  themes(includeRejected: Boolean = false, onlyDefault: Boolean = false, before: String, after: String, first: Int, last: Int): UsersThemesConnection
  nthemes(filter: ThemeFilter = available, before: String, after: String, first: Int, last: Int): ThemeConnection
  theme(themeID: ID!): UserTheme
  insights(filter: UserInsightFilterEnum = positive, before: String, after: String, first: Int, last: Int): UserInsightConnection
  subscribedThemes(before: String, after: String, first: Int, last: Int): UsersThemesConnection
  defaultThemes(before: String, after: String, first: Int, last: Int): UsersThemesConnection
}

type UserInsightConnection {
  pageInfo: PageInfo!
  edges: [UserInsightEdge]
}

type UserInsightEdge {
  node: UserThemeInsight
  cursor: String!
}

enum UserInsightFilterEnum {
  POSITIVE
  NEGATIVE
  UNRATED
}

type UsersThemesConnection {
  pageInfo: PageInfo!
  edges: [UsersThemesEdge]
}

type UsersThemesEdge {
  node: UserTheme
  cursor: String!
  status: String
}

type UserTheme {
  id: ID!
  status: String
  name: String!
  url: String!
  isSystem: Boolean!
  isDefault: Boolean!
  theme: Theme
  insights(includeRated: Boolean = false, before: String, after: String, first: Int, last: Int): UserThemeInsightsConnection
}

type UserThemeInsight {
  id: ID!
  rate: Int
  content: String!
  ratedAt: String
  theme: Theme
  insight: Insight!
}

type UserThemeInsightsConnection {
  pageInfo: PageInfo!
  edges: [UserThemeInsightsEdge]
}

type UserThemeInsightsEdge {
  node: UserThemeInsight
  cursor: String!
}

input UserThemeMutationInput {
  id: ID!
  status: String!
  clientMutationId: String!
}

type UserThemeMutationPayload {
  userTheme: UserTheme!
  clientMutationId: String!
}

input VoteForInsightInput {
  themeID: ID!
  insightID: ID!
  isPositive: Boolean!
  clientMutationId: String!
}

type VoteForInsightPayload {
  theme: Theme
  viewer: User
  insightID: ID
  insightEdge: ThemesInsightsEdge
  clientMutationId: String!
}
