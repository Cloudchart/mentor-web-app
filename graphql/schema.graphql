schema {
  query: Query
  mutation: Mutation
}

input ActivateUserInput {
  userId: ID
  clientMutationId: String!
}

type ActivateUserPayload {
  user: User!
  clientMutationId: String!
}

input AddBotReactionToOwnerMutationInput {
  ownerID: ID
  scope: String
  mood: String = "positive"
  content: String!
  clientMutationId: String!
}

type AddBotReactionToOwnerMutationPayload {
  reaction: BotReaction!
  owner: BotReactionOwner!
  reactionEdge: String!
  clientMutationId: String!
}

input AddCollectionToUserMutationInput {
  name: String!
  clientMutationId: String!
}

type AddCollectionToUserMutationPayload {
  collection: UserCollection!
  collectionID: ID!
  collectionEdge: UserCollectionsConnectionEdge
  clientMutationId: String!
}

input AddInsightToCollectionMutationInput {
  insightID: ID!
  collectionID: ID!
  clientMutationId: String!
}

type AddInsightToCollectionMutationPayload {
  insight: Insight!
  insightID: ID!
  collection: UserCollection!
  insightEdge: UserCollectionInsightsEdge!
  clientMutationId: String!
}

input AddInsightToTopicLinkInput {
  topicLinkID: ID!
  insightID: ID!
  clientMutationId: String!
}

type AddInsightToTopicLinkPayload {
  insight: Insight!
  topicLink: TopicLink!
  insightEdge: TopicLinkInsightsEdge!
  clientMutationId: String!
}

type Admin implements Node {
  id: ID!
  name: String
  users(after: String, first: Int, before: String, last: Int): AdminUsersConnection
  insights(after: String, first: Int, before: String, last: Int, query: String): AdminInsightsConnection
  themes(after: String, first: Int, before: String, last: Int, query: String, filter: String, order: String): AdminThemesConnection
  topics(after: String, first: Int, before: String, last: Int): AdminTopicsConnection
  questions(after: String, first: Int, before: String, last: Int, filter: QuestionFilter = unansweredForUser): QuestionsConnection
  reactions(after: String, first: Int, before: String, last: Int, scope: String): UnchainedBotReactionsConnection
}

type AdminInsight implements Node {
  id: ID!
  content: String!
  themes(after: String, first: Int, before: String, last: Int, query: String, filter: String, order: String): AdminThemesConnection
  createdAt: String
}

type AdminInsightsConnection {
  pageInfo: PageInfo!
  edges: [AdminInsightsEdge]
  count: Int!
}

type AdminInsightsEdge {
  node: AdminInsight
  cursor: String!
}

type AdminTheme implements Node {
  id: ID!
  name: String
  isSystem: Boolean!
  isDefault: Boolean!
  createdAt: String
}

type AdminThemesConnection {
  pageInfo: PageInfo!
  edges: [AdminThemesEdge]
  count: Int!
}

type AdminThemesEdge {
  node: AdminTheme
  cursor: String!
}

type AdminTopicsConnection {
  pageInfo: PageInfo!
  edges: [AdminTopicsEdge]
}

type AdminTopicsEdge {
  node: Topic
  cursor: String!
}

type AdminUsersConnection {
  pageInfo: PageInfo!
  edges: [AdminUsersEdge]
}

type AdminUsersEdge {
  node: User
  cursor: String!
}

type Answer implements Node, BotReactionOwner {
  id: ID!
  content: String!
  position: Int!
  reaction: BotReaction
}

input AnswerTheQuestionInput {
  questionID: ID!
  answerID: ID!
  clientMutationId: String!
}

type AnswerTheQuestionPayload {
  question: Question!
  answerEdge: QuestionAnswersEdge!
  clientMutationId: String!
}

type BotReaction implements Node {
  id: ID!
  scope: String
  mood: String!
  content: String!
  weight: Int!
}

interface BotReactionOwner {
  id: ID!
  reaction: BotReaction
}

input CreateQuestionMutationInput {
  content: String!
  severity: Int!
  clientMutationId: String!
}

type CreateQuestionMutationPayload {
  question: Question!
  questionEdge: QuestionsEdge!
  admin: Admin!
  clientMutationId: String!
}

input CreateThemeInput {
  name: String!
  isSystem: Boolean
  isDefault: Boolean
  clientMutationId: String!
}

type CreateThemePayload {
  admin: Admin
  themeEdge: AdminThemesEdge
  clientMutationId: String!
}

input DislikeInsightInput {
  id: ID!
  clientMutationId: String!
}

input DislikeInsightInTopicMutationInput {
  insightID: ID!
  topicID: ID!
  clientMutationId: String!
}

type DislikeInsightInTopicMutationPayload {
  insight: Insight!
  insightID: ID!
  topic: Topic!
  insightEdge: TopicInsightsEdge!
  clientMutationId: String!
}

type DislikeInsightPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input GrantRoleToUserInput {
  userID: ID!
  roleName: String!
  clientMutationId: String!
}

type GrantRoleToUserPayload {
  role: Role!
  roleEdge: UserRolesEdge!
  user: User!
  clientMutationId: String!
}

type Insight implements Node {
  id: ID!
  content: String!
  origin: InsightOrigin
  createdAt: String!
  likeReaction: BotReaction
  dislikeReaction: BotReaction
}

type InsightOrigin {
  author: String!
  url: String!
  title: String!
  duration: Int!
}

input IntroduceAnswerInput {
  questionID: ID!
  content: String!
  clientMutationId: String!
}

type IntroduceAnswerPayload {
  answer: Answer!
  question: Question!
  answerEdge: QuestionAnswersEdge!
  clientMutationId: String!
}

input IntroduceLinkToTopicInput {
  topicID: ID!
  linkURL: String!
  linkTitle: String!
  linkInsightsIDs: [ID]
  reactionContent: String!
  clientMutationId: String!
}

type IntroduceLinkToTopicPayload {
  link: TopicLink!
  linkEdge: TopicLinksEdge!
  topic: Topic!
  clientMutationId: String!
}

input LikeInsightInput {
  id: ID!
  clientMutationId: String!
}

input LikeInsightInTopicMutationInput {
  insightID: ID!
  topicID: ID!
  shouldAddToUserCollectionWithTopicName: Boolean = false
  clientMutationId: String!
}

type LikeInsightInTopicMutationPayload {
  insight: Insight!
  insightID: ID!
  topic: Topic!
  insightEdge: TopicInsightsEdge!
  clientMutationId: String!
}

type LikeInsightPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input MarkInsightUsefulInCollectionMutationInput {
  insightID: ID!
  collectionID: ID!
  clientMutationId: String!
}

type MarkInsightUsefulInCollectionMutationPayload {
  insight: Insight!
  insightID: ID!
  collection: UserCollection!
  insightEdge: UserCollectionInsightsEdge!
  clientMutationId: String!
}

input MarkInsightUsefulInput {
  id: ID!
  clientMutationId: String!
}

type MarkInsightUsefulPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input MarkInsightUselessInCollectionMutationInput {
  insightID: ID!
  collectionID: ID!
  clientMutationId: String!
}

type MarkInsightUselessInCollectionMutationPayload {
  insight: Insight!
  insightID: ID!
  collection: UserCollection!
  insightEdge: UserCollectionInsightsEdge!
  clientMutationId: String!
}

input MarkInsightUselessInput {
  id: ID!
  clientMutationId: String!
}

type MarkInsightUselessPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input MarkTopicLinkAsReadInput {
  topicLinkID: ID!
  clientMutationId: String!
}

type MarkTopicLinkAsReadPayload {
  topicLink: TopicLink!
  topic: Topic!
  topicLinkID: String!
  topicLinkEdge: TopicLinksEdge!
  clientMutationId: String!
}

type Mutation {
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  resetUser(input: ResetUserInput!): ResetUserPayload
  setUserPushToken(input: SetUserPushTokenInput!): SetUserPushTokenPayload
  subscribeOnTheme(input: SubscribeOnThemeInput!): SubscribeOnThemePayload
  unsubscribeFromTheme(input: UnsubscribeFromThemeInput!): UnsubscribeFromThemePayload
  refreshTopic(input: RefreshTopicInput!): RefreshTopicPayload
  rejectTheme(input: RejectThemeInput!): RejectThemePayload
  likeInsight(input: LikeInsightInput!): LikeInsightPayload
  markInsightUseful(input: MarkInsightUsefulInput!): MarkInsightUsefulPayload
  dislikeInsight(input: DislikeInsightInput!): DislikeInsightPayload
  markInsightUseless(input: MarkInsightUselessInput!): MarkInsightUselessPayload
  resetInsight(input: ResetInsightInput!): ResetInsightPayload
  updateUserNotificationsSettings(input: UpdateUserNotificationsSettingsInput!): UpdateUserNotificationsSettingsPayload
  createTheme(input: CreateThemeInput!): CreateThemePayload
  updateTheme(input: UpdateThemeInput!): UpdateThemePayload
  addCollectionToUser(input: AddCollectionToUserMutationInput!): AddCollectionToUserMutationPayload
  removeCollectionFromUser(input: RemoveCollectionFromUserMutationInput!): RemoveCollectionFromUserMutationPayload
  subscribeOnTopic(input: SubscribeOnTopicMutationInput!): SubscribeOnTopicMutationPayload
  unsubscribeFromTopic(input: UnsubscribeFromTopicMutationInput!): UnsubscribeFromTopicMutationPayload
  likeInsightInTopic(input: LikeInsightInTopicMutationInput!): LikeInsightInTopicMutationPayload
  dislikeInsightInTopic(input: DislikeInsightInTopicMutationInput!): DislikeInsightInTopicMutationPayload
  postponeInsightInTopic(input: PostponeInsightInTopicMutationInput!): PostponeInsightInTopicMutationPayload
  addInsightToCollection(input: AddInsightToCollectionMutationInput!): AddInsightToCollectionMutationPayload
  markInsightUsefulInCollection(input: MarkInsightUsefulInCollectionMutationInput!): MarkInsightUsefulInCollectionMutationPayload
  markInsightUselessInCollection(input: MarkInsightUselessInCollectionMutationInput!): MarkInsightUselessInCollectionMutationPayload
  introduceLinkToTopic(input: IntroduceLinkToTopicInput!): IntroduceLinkToTopicPayload
  removeTopicLink(input: RemoveTopicLinkInput!): RemoveTopicLinkPayload
  addInsightToTopicLink(input: AddInsightToTopicLinkInput!): AddInsightToTopicLinkPayload
  updateTopicLink(input: UpdateTopicLinkInput!): UpdateTopicLinkPayload
  grantRoleToUser(input: GrantRoleToUserInput!): GrantRoleToUserPayload
  revokeRoleFromUser(input: RevokeRoleFromUserInput!): RevokeRoleFromUserPayload
  markTopicLinkAsRead(input: MarkTopicLinkAsReadInput!): MarkTopicLinkAsReadPayload
  createQuestion(input: CreateQuestionMutationInput!): CreateQuestionMutationPayload
  updateQuestion(input: UpdateQuestionInput!): UpdateQuestionPayload
  removeQuestion(input: RemoveQuestionMutationInput!): RemoveQuestionMutationPayload
  publishQuestion(input: PublishQuestionMutationInput!): PublishQuestionMutationPayload
  unpublishQuestion(input: UnpublishQuestionMutationInput!): UnpublishQuestionMutationPayload
  introduceAnswer(input: IntroduceAnswerInput!): IntroduceAnswerPayload
  updateAnswer(input: UpdateAnswerInput!): UpdateAnswerPayload
  removeAnswer(input: RemoveAnswerInput!): RemoveAnswerPayload
  answerTheQuestion(input: AnswerTheQuestionInput!): AnswerTheQuestionPayload
  setBotReactionToOwner(input: SetBotReactionToOwnerMutationInput!): SetBotReactionToOwnerMutationPayload
  addBotReactionToOwner(input: AddBotReactionToOwnerMutationInput!): AddBotReactionToOwnerMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PostponeInsightInTopicMutationInput {
  insightID: ID!
  topicID: ID!
  clientMutationId: String!
}

type PostponeInsightInTopicMutationPayload {
  insight: Insight!
  insightID: ID!
  topic: Topic!
  insightEdge: TopicInsightsEdge!
  clientMutationId: String!
}

input PublishQuestionMutationInput {
  questionID: ID!
  clientMutationId: String!
}

type PublishQuestionMutationPayload {
  question: Question!
  clientMutationId: String!
}

type Query {
  viewer: User
  node(id: ID!): Node
  admin: Admin
}

type Question implements Node, BotReactionOwner {
  id: ID!
  content: String!
  isPublished: Boolean!
  severity: Int!
  answers(after: String, first: Int, before: String, last: Int): QuestionAnswersConnection
  reaction: BotReaction
}

type QuestionAnswersConnection {
  pageInfo: PageInfo!
  edges: [QuestionAnswersEdge]
  count: Int!
}

type QuestionAnswersEdge {
  node: Answer
  cursor: String!
}

enum QuestionFilter {
  ALL
  ANSWERED
  UNANSWERED
}

type QuestionsConnection {
  pageInfo: PageInfo!
  edges: [QuestionsEdge]
}

type QuestionsEdge {
  node: Question
  cursor: String!
}

input RefreshTopicInput {
  topicID: ID!
  clientMutationId: String!
}

type RefreshTopicPayload {
  topic: Topic!
  clientMutationId: String!
}

input RejectThemeInput {
  id: ID!
  clientMutationId: String!
}

type RejectThemePayload {
  user: User!
  theme: UserTheme!
  themeID: ID!
  clientMutationId: String!
}

input RemoveAnswerInput {
  answerID: ID!
  clientMutationId: String!
}

type RemoveAnswerPayload {
  answerID: ID!
  question: Question!
  clientMutationId: String!
}

input RemoveCollectionFromUserMutationInput {
  collectionID: ID!
  clientMutationId: String!
}

type RemoveCollectionFromUserMutationPayload {
  collection: UserCollection!
  collectionID: ID!
  clientMutationId: String!
}

input RemoveQuestionMutationInput {
  questionID: ID!
  clientMutationId: String!
}

type RemoveQuestionMutationPayload {
  question: Question!
  questionID: ID!
  admin: Admin!
  clientMutationId: String!
}

input RemoveTopicLinkInput {
  linkID: ID!
  clientMutationId: String!
}

type RemoveTopicLinkPayload {
  link: TopicLink!
  linkID: ID!
  topic: Topic!
  clientMutationId: String!
}

input ResetInsightInput {
  id: ID!
  clientMutationId: String!
}

type ResetInsightPayload {
  user: User!
  theme: UserTheme!
  insight: UserThemeInsight!
  insightID: ID!
  clientMutationId: String!
}

input ResetUserInput {
  userId: ID
  clientMutationId: String!
}

type ResetUserPayload {
  user: User!
  clientMutationId: String!
}

input RevokeRoleFromUserInput {
  userID: ID!
  roleName: String!
  clientMutationId: String!
}

type RevokeRoleFromUserPayload {
  role: Role!
  roleID: ID!
  user: User!
  clientMutationId: String!
}

type Role implements Node {
  id: ID!
  name: String!
}

input SetBotReactionToOwnerMutationInput {
  ownerID: ID
  scope: String
  mood: String = "positive"
  content: String!
  clientMutationId: String!
}

type SetBotReactionToOwnerMutationPayload {
  reaction: BotReaction!
  owner: BotReactionOwner!
  clientMutationId: String!
}

input SetUserPushTokenInput {
  token: String!
  userId: ID
  clientMutationId: String!
}

type SetUserPushTokenPayload {
  user: User!
  clientMutationId: String!
}

input SubscribeOnThemeInput {
  id: ID!
  clientMutationId: String!
}

type SubscribeOnThemePayload {
  user: User!
  theme: UserTheme!
  themeID: ID!
  clientMutationId: String!
}

input SubscribeOnTopicMutationInput {
  topicID: ID!
  clientMutationId: String!
}

type SubscribeOnTopicMutationPayload {
  topic: Topic!
  topicID: ID!
  topicEdge: UserTopicsConnectionEdge
  user: User
  clientMutationId: String!
}

type Theme implements Node {
  id: ID!
  name: String
  isSystem: Boolean!
  isDefault: Boolean!
}

type Topic implements Node {
  id: ID!
  name: String
  description: String
  isDefault: Boolean!
  isPaid: Boolean!
  isSubscribedByViewer: Boolean!
  isFinishedByViewer: Boolean!
  insights(after: String, first: Int, before: String, last: Int, filter: TopicInsightsFilterEnum = unrated): TopicInsightsConnection
  links(after: String, first: Int, before: String, last: Int, filter: TopicLinkFilter = default): TopicLinksConnection
}

type TopicInsightsConnection {
  pageInfo: PageInfo!
  edges: [TopicInsightsEdge]
  ratedCount: Int!
  unratedCount: Int!
}

type TopicInsightsEdge {
  node: Insight
  cursor: String!
}

enum TopicInsightsFilterEnum {
  ALL
  RATED
  UNRATED
  LIKED
  DISLIKED
  ADMIN
  PREVIEW
}

type TopicLink implements Node {
  id: ID!
  url: String!
  title: String!
  reaction: BotReaction!
  insights(after: String, first: Int, before: String, last: Int): TopicLinkInsightsConnection
}

enum TopicLinkFilter {
  ALL
  READ
  UNREAD
  DEFAULT
}

type TopicLinkInsightsConnection {
  pageInfo: PageInfo!
  edges: [TopicLinkInsightsEdge]
}

type TopicLinkInsightsEdge {
  node: Insight
  cursor: String!
}

type TopicLinksConnection {
  pageInfo: PageInfo!
  edges: [TopicLinksEdge]
}

type TopicLinksEdge {
  node: TopicLink
  cursor: String!
}

type UnchainedBotReactionsConnection {
  pageInfo: PageInfo!
  edges: [UnchainedBotReactionsEdge]
}

type UnchainedBotReactionsEdge {
  node: BotReaction
  cursor: String!
}

input UnpublishQuestionMutationInput {
  questionID: ID!
  clientMutationId: String!
}

type UnpublishQuestionMutationPayload {
  question: Question!
  clientMutationId: String!
}

input UnsubscribeFromThemeInput {
  id: ID!
  clientMutationId: String!
}

type UnsubscribeFromThemePayload {
  user: User!
  theme: UserTheme!
  themeID: ID!
  clientMutationId: String!
}

input UnsubscribeFromTopicMutationInput {
  topicID: ID!
  clientMutationId: String!
}

type UnsubscribeFromTopicMutationPayload {
  topic: Topic!
  topicID: ID!
  topicEdge: UserTopicsConnectionEdge
  user: User
  clientMutationId: String!
}

input UpdateAnswerInput {
  answerID: ID!
  content: String!
  clientMutationId: String!
}

type UpdateAnswerPayload {
  answer: Answer!
  clientMutationId: String!
}

input UpdateQuestionInput {
  questionID: ID!
  content: String!
  severity: Int!
  clientMutationId: String!
}

type UpdateQuestionPayload {
  question: Question!
  clientMutationId: String!
}

input UpdateThemeInput {
  id: ID!
  name: String!
  isSystem: Boolean
  isDefault: Boolean
  clientMutationId: String!
}

type UpdateThemePayload {
  admin: Admin
  theme: AdminTheme
  clientMutationId: String!
}

input UpdateTopicLinkInput {
  linkID: ID!
  linkURL: String!
  linkTitle: String!
  linkInsightsIDs: [ID]!
  reactionContent: String!
  clientMutationId: String!
}

type UpdateTopicLinkPayload {
  link: TopicLink!
  linkID: ID!
  clientMutationId: String!
}

input UpdateUserInput {
  email: String
  name: String
  clientMutationId: String!
}

input UpdateUserNotificationsSettingsInput {
  startAt: String
  finishAt: String
  utcOffset: Int
  timesToSend: Int
  clientMutationId: String!
}

type UpdateUserNotificationsSettingsPayload {
  notificationsSettings: UserNotificationsSettings!
  clientMutationId: String!
}

type UpdateUserPayload {
  user: User!
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  email: String
  topics(after: String, first: Int, before: String, last: Int, filter: UserTopicsConnectionFilter = all): UserTopicsConnectionConnection
  collections(after: String, first: Int, before: String, last: Int): UserCollectionsConnectionConnection
  roles(after: String, first: Int, before: String, last: Int): UserRolesConnection
  reactions(after: String, first: Int, before: String, last: Int, scope: String): UnchainedBotReactionsConnection
  questions(after: String, first: Int, before: String, last: Int, filter: QuestionFilter = unansweredForUser): QuestionsConnection
  isActive: Boolean
  pushToken: String
  themes(after: String, first: Int, before: String, last: Int, filter: UserThemeFilterEnum = default): UserThemesConnection
  theme(id: ID!): UserTheme!
  insights(after: String, first: Int, before: String, last: Int, filter: UserInsightFilter = unratedForUser): UserInsightsConnection
  notificationsSettings: UserNotificationsSettings
}

type UserCollection implements Node {
  id: ID!
  name: String!
  insights(after: String, first: Int, before: String, last: Int, filter: UserCollectionInsightsFilter = useful): UserCollectionInsightsConnection
}

type UserCollectionInsightsConnection {
  pageInfo: PageInfo!
  edges: [UserCollectionInsightsEdge]
  count: Int!
  usefulCount: Int!
  uselessCount: Int!
}

type UserCollectionInsightsEdge {
  node: Insight
  cursor: String!
}

enum UserCollectionInsightsFilter {
  ALL
  USEFUL
  USELESS
}

type UserCollectionsConnectionConnection {
  pageInfo: PageInfo!
  edges: [UserCollectionsConnectionEdge]
  count: Int!
}

type UserCollectionsConnectionEdge {
  node: UserCollection
  cursor: String!
}

enum UserInsightFilter {
  RATED
  UNRATED
  POSTPONED
  FOLLOWUPS
}

type UserInsightsConnection {
  pageInfo: PageInfo!
  edges: [UserInsightsEdge]
}

type UserInsightsEdge {
  node: Insight
  cursor: String!
  topic: Topic!
}

type UserNotificationsSettings {
  startAt: String!
  finishAt: String!
  utcOffset: Int!
  timesToSend: Int!
}

type UserRolesConnection {
  pageInfo: PageInfo!
  edges: [UserRolesEdge]
}

type UserRolesEdge {
  node: Role
  cursor: String!
}

type UserTheme implements Node {
  id: ID!
  name: String!
  url: String!
  isSubscribed: Boolean!
  subscribedAt: String
  isRejected: Boolean!
  insights(after: String, first: Int, before: String, last: Int, themeId: ID, userId: ID, filter: UserThemeInsightsFilterEnum): UserThemeInsightsConnection
}

enum UserThemeFilterEnum {
  DEFAULT
  SYSTEM
  AVAILABLE
  VISIBLE
  SUBSCRIBED
  REJECTED
  RELATED
  UNRELATED
}

type UserThemeInsight implements Node {
  id: ID!
  content: String!
  origin: InsightOrigin
  url: String!
  user: User!
  theme: Theme!
  rate: Int
  ratedAt: String
}

type UserThemeInsightsConnection {
  pageInfo: PageInfo!
  edges: [UserThemeInsightsEdge]
  totalCount: Int
  ratedCount: Int
  unratedCount: Int
}

type UserThemeInsightsEdge {
  node: UserThemeInsight
  cursor: String!
}

enum UserThemeInsightsFilterEnum {
  RATED
  UNRATED
  POSITIVE
  LIKED
  USEFUL
  NEGATIVE
  DISLIKED
  USELESS
  FOLLOWUPS
}

type UserThemesConnection {
  pageInfo: PageInfo!
  edges: [UserThemesEdge]
  count: Int!
  subscribedCount: Int!
  subscriptionsCount: Int!
  rejectedCount: Int!
}

type UserThemesEdge {
  node: UserTheme
  cursor: String!
}

type UserTopicsConnectionConnection {
  pageInfo: PageInfo!
  edges: [UserTopicsConnectionEdge]
  count: Int!
  availableSlotsCount: Int!
}

type UserTopicsConnectionEdge {
  node: Topic
  cursor: String!
}

enum UserTopicsConnectionFilter {
  ALL
  DEFAULT
  SUBSCRIBED
}
