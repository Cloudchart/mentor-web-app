input ActivateUserInput {
  userId: ID
  clientMutationId: String!
}

type ActivateUserPayload {
  user: User!
  clientMutationId: String!
}

type Mutation {
  activateUser(input: ActivateUserInput!): ActivateUserPayload
  updateUserTheme(input: UpdateUserThemeInput!): UpdateUserThemePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer: User
  node(id: ID!): Node
}

input UpdateUserThemeInput {
  id: ID!
  status: UserThemeStatusEnum!
  userId: ID
  clientMutationId: String!
}

type UpdateUserThemePayload {
  userTheme: UserTheme!
  user: User!
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  isActive: Boolean
  themes(before: String, after: String, first: Int, last: Int, filter: UserThemeFilterEnum = default): UserThemesConnection
}

type UserTheme implements Node {
  id: ID!
  name: String!
  url: String!
  isSubscribed: Boolean!
  isRejected: Boolean!
}

enum UserThemeFilterEnum {
  DEFAULT
  AVAILABLE
  VISIBLE
  SUBSCRIBED
  REJECTED
  RELATED
  UNRELATED
}

type UserThemesConnection {
  pageInfo: PageInfo!
  edges: [UserThemesEdge]
  count: Int!
}

type UserThemesEdge {
  node: UserTheme
  cursor: String!
}

enum UserThemeStatusEnum {
  AVAILABLE
  VISIBLE
  REJECTED
  SUBSCRIBED
}
